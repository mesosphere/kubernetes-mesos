(jdef) This patch contains fixes from the (currently pending) v0.14.2 release

From 8343508d582c9141e52cd3d69a34f7282c0800d8 Mon Sep 17 00:00:00 2001
From: Rohit Jnagal <jnagal@google.com>
Date: Wed, 1 Apr 2015 23:11:33 +0000
Subject: [PATCH] Remove validation for Capacity as it got moved from Spec to
 Status.

Also fix breakage from ExternalID validation: Default ExternalID to node name when not specified.
---
 pkg/api/testing/fuzzer.go             |  4 ++
 pkg/api/v1beta1/conversion_test.go    |  9 +++-
 pkg/api/v1beta1/defaults.go           |  5 +++
 pkg/api/v1beta1/defaults_test.go      | 43 +++++++++++++++++++
 pkg/api/v1beta1/types.go              |  2 +-
 pkg/api/v1beta2/defaults.go           |  5 +++
 pkg/api/v1beta2/defaults_test.go      | 43 +++++++++++++++++++
 pkg/api/v1beta2/types.go              |  2 +-
 pkg/api/v1beta3/defaults.go           |  5 +++
 pkg/api/v1beta3/defaults_test.go      | 11 +++++
 pkg/api/v1beta3/types.go              |  2 +-
 pkg/api/validation/validation.go      | 17 +-------
 pkg/api/validation/validation_test.go | 80 +++--------------------------------
 pkg/kubectl/cmd/get_test.go           |  3 ++
 14 files changed, 136 insertions(+), 95 deletions(-)

diff --git a/pkg/api/testing/fuzzer.go b/pkg/api/testing/fuzzer.go
index 85a2d27..10ebcd5 100644
--- a/pkg/api/testing/fuzzer.go
+++ b/pkg/api/testing/fuzzer.go
@@ -223,6 +223,10 @@ func FuzzerFor(t *testing.T, version string, src rand.Source) *fuzz.Fuzzer {
 				ss.TargetPort.StrVal = "x" + ss.TargetPort.StrVal // non-empty
 			}
 		},
+		func(n *api.Node, c fuzz.Continue) {
+			c.FuzzNoCustom(n)
+			n.Spec.ExternalID = "external"
+		},
 	)
 	return f
 }
diff --git a/pkg/api/v1beta1/conversion_test.go b/pkg/api/v1beta1/conversion_test.go
index 548d7b3..e3938f9 100644
--- a/pkg/api/v1beta1/conversion_test.go
+++ b/pkg/api/v1beta1/conversion_test.go
@@ -175,10 +175,15 @@ func TestVolumeMountConversionToNew(t *testing.T) {
 
 func TestMinionListConversionToNew(t *testing.T) {
 	oldMinion := func(id string) current.Minion {
-		return current.Minion{TypeMeta: current.TypeMeta{ID: id}}
+		return current.Minion{
+			TypeMeta:   current.TypeMeta{ID: id},
+			ExternalID: id}
 	}
 	newNode := func(id string) newer.Node {
-		return newer.Node{ObjectMeta: newer.ObjectMeta{Name: id}}
+		return newer.Node{
+			ObjectMeta: newer.ObjectMeta{Name: id},
+			Spec:       newer.NodeSpec{ExternalID: id},
+		}
 	}
 	oldMinions := []current.Minion{
 		oldMinion("foo"),
diff --git a/pkg/api/v1beta1/defaults.go b/pkg/api/v1beta1/defaults.go
index 629668d..04cf329 100644
--- a/pkg/api/v1beta1/defaults.go
+++ b/pkg/api/v1beta1/defaults.go
@@ -144,6 +144,11 @@ func init() {
 				obj.Phase = NamespaceActive
 			}
 		},
+		func(obj *Minion) {
+			if obj.ExternalID == "" {
+				obj.ExternalID = obj.ID
+			}
+		},
 	)
 }
 
diff --git a/pkg/api/v1beta1/defaults_test.go b/pkg/api/v1beta1/defaults_test.go
index 9dd881e..dec1145 100644
--- a/pkg/api/v1beta1/defaults_test.go
+++ b/pkg/api/v1beta1/defaults_test.go
@@ -148,3 +148,46 @@ func TestSetDefaultContainerManifestHostNetwork(t *testing.T) {
 		t.Errorf("Expected container port to be defaulted, was made %d instead of %d", hostPortNum, portNum)
 	}
 }
+
+func TestSetDefaultServicePort(t *testing.T) {
+	// Unchanged if set.
+	in := &current.Service{Ports: []current.ServicePort{{Protocol: "UDP", Port: 9376, ContainerPort: util.NewIntOrStringFromInt(118)}}}
+	out := roundTrip(t, runtime.Object(in)).(*current.Service)
+	if out.Ports[0].Protocol != current.ProtocolUDP {
+		t.Errorf("Expected protocol %s, got %s", current.ProtocolUDP, out.Ports[0].Protocol)
+	}
+	if out.Ports[0].ContainerPort != in.Ports[0].ContainerPort {
+		t.Errorf("Expected port %d, got %d", in.Ports[0].ContainerPort, out.Ports[0].ContainerPort)
+	}
+
+	// Defaulted.
+	in = &current.Service{Ports: []current.ServicePort{{Protocol: "", Port: 9376, ContainerPort: util.NewIntOrStringFromInt(0)}}}
+	out = roundTrip(t, runtime.Object(in)).(*current.Service)
+	if out.Ports[0].Protocol != current.ProtocolTCP {
+		t.Errorf("Expected protocol %s, got %s", current.ProtocolTCP, out.Ports[0].Protocol)
+	}
+	if out.Ports[0].ContainerPort != util.NewIntOrStringFromInt(in.Ports[0].Port) {
+		t.Errorf("Expected port %d, got %v", in.Ports[0].Port, out.Ports[0].ContainerPort)
+	}
+
+	// Defaulted.
+	in = &current.Service{Ports: []current.ServicePort{{Protocol: "", Port: 9376, ContainerPort: util.NewIntOrStringFromString("")}}}
+	out = roundTrip(t, runtime.Object(in)).(*current.Service)
+	if out.Ports[0].Protocol != current.ProtocolTCP {
+		t.Errorf("Expected protocol %s, got %s", current.ProtocolTCP, out.Ports[0].Protocol)
+	}
+	if out.Ports[0].ContainerPort != util.NewIntOrStringFromInt(in.Ports[0].Port) {
+		t.Errorf("Expected port %d, got %v", in.Ports[0].Port, out.Ports[0].ContainerPort)
+	}
+}
+
+func TestSetDefaultMinionExternalID(t *testing.T) {
+	name := "node0"
+	m := &current.Minion{}
+	m.ID = name
+	obj2 := roundTrip(t, runtime.Object(m))
+	m2 := obj2.(*current.Minion)
+	if m2.ExternalID != name {
+		t.Errorf("Expected default External ID: %s, got: %s", name, m2.ExternalID)
+	}
+}
diff --git a/pkg/api/v1beta1/types.go b/pkg/api/v1beta1/types.go
index 65a23f7..51a1866 100644
--- a/pkg/api/v1beta1/types.go
+++ b/pkg/api/v1beta1/types.go
@@ -953,7 +953,7 @@ type Minion struct {
 	// Labels for the node
 	Labels map[string]string `json:"labels,omitempty" description:"map of string keys and values that can be used to organize and categorize minions; labels of a minion assigned by the scheduler must match the scheduled pod's nodeSelector"`
 	// External ID of the node
-	ExternalID string `json:"externalID,omitempty" description:"external id of the node assigned by some machine database (e.g. a cloud provider)"`
+	ExternalID string `json:"externalID,omitempty" description:"external id of the node assigned by some machine database (e.g. a cloud provider). Defaults to node name when empty."`
 }
 
 // MinionList is a list of minions.
diff --git a/pkg/api/v1beta2/defaults.go b/pkg/api/v1beta2/defaults.go
index 067ee6b..f1d7743 100644
--- a/pkg/api/v1beta2/defaults.go
+++ b/pkg/api/v1beta2/defaults.go
@@ -145,6 +145,11 @@ func init() {
 				obj.Phase = NamespaceActive
 			}
 		},
+		func(obj *Minion) {
+			if obj.ExternalID == "" {
+				obj.ExternalID = obj.ID
+			}
+		},
 	)
 }
 
diff --git a/pkg/api/v1beta2/defaults_test.go b/pkg/api/v1beta2/defaults_test.go
index 4051957..322a418 100644
--- a/pkg/api/v1beta2/defaults_test.go
+++ b/pkg/api/v1beta2/defaults_test.go
@@ -147,3 +147,46 @@ func TestSetDefaultContainerManifestHostNetwork(t *testing.T) {
 		t.Errorf("Expected container port to be defaulted, was made %d instead of %d", hostPortNum, portNum)
 	}
 }
+
+func TestSetDefaultServicePort(t *testing.T) {
+	// Unchanged if set.
+	in := &current.Service{Ports: []current.ServicePort{{Protocol: "UDP", Port: 9376, ContainerPort: util.NewIntOrStringFromInt(118)}}}
+	out := roundTrip(t, runtime.Object(in)).(*current.Service)
+	if out.Ports[0].Protocol != current.ProtocolUDP {
+		t.Errorf("Expected protocol %s, got %s", current.ProtocolUDP, out.Ports[0].Protocol)
+	}
+	if out.Ports[0].ContainerPort != in.Ports[0].ContainerPort {
+		t.Errorf("Expected port %d, got %d", in.Ports[0].ContainerPort, out.Ports[0].ContainerPort)
+	}
+
+	// Defaulted.
+	in = &current.Service{Ports: []current.ServicePort{{Protocol: "", Port: 9376, ContainerPort: util.NewIntOrStringFromInt(0)}}}
+	out = roundTrip(t, runtime.Object(in)).(*current.Service)
+	if out.Ports[0].Protocol != current.ProtocolTCP {
+		t.Errorf("Expected protocol %s, got %s", current.ProtocolTCP, out.Ports[0].Protocol)
+	}
+	if out.Ports[0].ContainerPort != util.NewIntOrStringFromInt(in.Ports[0].Port) {
+		t.Errorf("Expected port %d, got %v", in.Ports[0].Port, out.Ports[0].ContainerPort)
+	}
+
+	// Defaulted.
+	in = &current.Service{Ports: []current.ServicePort{{Protocol: "", Port: 9376, ContainerPort: util.NewIntOrStringFromString("")}}}
+	out = roundTrip(t, runtime.Object(in)).(*current.Service)
+	if out.Ports[0].Protocol != current.ProtocolTCP {
+		t.Errorf("Expected protocol %s, got %s", current.ProtocolTCP, out.Ports[0].Protocol)
+	}
+	if out.Ports[0].ContainerPort != util.NewIntOrStringFromInt(in.Ports[0].Port) {
+		t.Errorf("Expected port %d, got %v", in.Ports[0].Port, out.Ports[0].ContainerPort)
+	}
+}
+
+func TestSetDefaultMinionExternalID(t *testing.T) {
+	name := "node0"
+	m := &current.Minion{}
+	m.ID = name
+	obj2 := roundTrip(t, runtime.Object(m))
+	m2 := obj2.(*current.Minion)
+	if m2.ExternalID != name {
+		t.Errorf("Expected default External ID: %s, got: %s", name, m2.ExternalID)
+	}
+}
diff --git a/pkg/api/v1beta2/types.go b/pkg/api/v1beta2/types.go
index 55088c4..af7feff 100644
--- a/pkg/api/v1beta2/types.go
+++ b/pkg/api/v1beta2/types.go
@@ -968,7 +968,7 @@ type Minion struct {
 	// Labels for the node
 	Labels map[string]string `json:"labels,omitempty" description:"map of string keys and values that can be used to organize and categorize minions; labels of a minion assigned by the scheduler must match the scheduled pod's nodeSelector"`
 	// External ID of the node
-	ExternalID string `json:"externalID,omitempty" description:"external id of the node assigned by some machine database (e.g. a cloud provider)"`
+	ExternalID string `json:"externalID,omitempty" description:"external id of the node assigned by some machine database (e.g. a cloud provider). Defaults to node name when empty."`
 }
 
 // MinionList is a list of minions.
diff --git a/pkg/api/v1beta3/defaults.go b/pkg/api/v1beta3/defaults.go
index 9e00a23..dbfdf0c 100644
--- a/pkg/api/v1beta3/defaults.go
+++ b/pkg/api/v1beta3/defaults.go
@@ -108,6 +108,11 @@ func init() {
 				obj.Phase = NamespaceActive
 			}
 		},
+		func(obj *Node) {
+			if obj.Spec.ExternalID == "" {
+				obj.Spec.ExternalID = obj.Name
+			}
+		},
 	)
 }
 
diff --git a/pkg/api/v1beta3/defaults_test.go b/pkg/api/v1beta3/defaults_test.go
index 6a7ea99..e9568b8 100644
--- a/pkg/api/v1beta3/defaults_test.go
+++ b/pkg/api/v1beta3/defaults_test.go
@@ -135,3 +135,14 @@ func TestSetDefaultPodSpecHostNetwork(t *testing.T) {
 		t.Errorf("Expected container port to be defaulted, was made %d instead of %d", hostPortNum, portNum)
 	}
 }
+
+func TestSetDefaultNodeExternalID(t *testing.T) {
+	name := "node0"
+	n := &current.Node{}
+	n.Name = name
+	obj2 := roundTrip(t, runtime.Object(n))
+	n2 := obj2.(*current.Node)
+	if n2.Spec.ExternalID != name {
+		t.Errorf("Expected default External ID: %s, got: %s", name, n2.Spec.ExternalID)
+	}
+}
diff --git a/pkg/api/v1beta3/types.go b/pkg/api/v1beta3/types.go
index d7837e3..4a9ac5f 100644
--- a/pkg/api/v1beta3/types.go
+++ b/pkg/api/v1beta3/types.go
@@ -985,7 +985,7 @@ type NodeSpec struct {
 	// PodCIDR represents the pod IP range assigned to the node
 	PodCIDR string `json:"podCIDR,omitempty" description:"pod IP range assigned to the node"`
 	// External ID of the node assigned by some machine database (e.g. a cloud provider)
-	ExternalID string `json:"externalID,omitempty" description:"external ID assigned to the node by some machine database (e.g. a cloud provider)"`
+	ExternalID string `json:"externalID,omitempty" description:"external ID assigned to the node by some machine database (e.g. a cloud provider). Defaults to node name when empty."`
 	// Unschedulable controls node schedulability of new pods. By default node is schedulable.
 	Unschedulable bool `json:"unschedulable,omitempty" description:"disable pod scheduling on the node"`
 }
diff --git a/pkg/api/validation/validation.go b/pkg/api/validation/validation.go
index 81c75de..29783bd 100644
--- a/pkg/api/validation/validation.go
+++ b/pkg/api/validation/validation.go
@@ -914,21 +914,8 @@ func ValidateReadOnlyPersistentDisks(volumes []api.Volume) errs.ValidationErrorL
 func ValidateMinion(node *api.Node) errs.ValidationErrorList {
 	allErrs := errs.ValidationErrorList{}
 	allErrs = append(allErrs, ValidateObjectMeta(&node.ObjectMeta, false, ValidateNodeName).Prefix("metadata")...)
-	// Capacity is required. Within capacity, memory and cpu resources are required.
-	if len(node.Status.Capacity) == 0 {
-		allErrs = append(allErrs, errs.NewFieldRequired("status.Capacity"))
-	} else {
-		if val, ok := node.Status.Capacity[api.ResourceMemory]; !ok {
-			allErrs = append(allErrs, errs.NewFieldRequired("status.Capacity[memory]"))
-		} else if val.Value() < 0 {
-			allErrs = append(allErrs, errs.NewFieldInvalid("status.Capacity[memory]", val, "memory capacity cannot be negative"))
-		}
-		if val, ok := node.Status.Capacity[api.ResourceCPU]; !ok {
-			allErrs = append(allErrs, errs.NewFieldRequired("status.Capacity[cpu]"))
-		} else if val.Value() < 0 {
-			allErrs = append(allErrs, errs.NewFieldInvalid("status.Capacity[cpu]", val, "cpu capacity cannot be negative"))
-		}
-	}
+
+	// Only validate spec. All status fields are optional and can be updated later.
 
 	// external ID is required.
 	if len(node.Spec.ExternalID) == 0 {
diff --git a/pkg/api/validation/validation_test.go b/pkg/api/validation/validation_test.go
index 615ff54..21ac661 100644
--- a/pkg/api/validation/validation_test.go
+++ b/pkg/api/validation/validation_test.go
@@ -1904,73 +1904,6 @@ func TestValidateMinion(t *testing.T) {
 				},
 			},
 		},
-		"missing-capacity": {
-			ObjectMeta: api.ObjectMeta{
-				Name:   "abc-123",
-				Labels: validSelector,
-			},
-			Spec: api.NodeSpec{
-				ExternalID: "external",
-			},
-		},
-		"missing-memory": {
-			ObjectMeta: api.ObjectMeta{
-				Name:   "abc-123",
-				Labels: validSelector,
-			},
-			Status: api.NodeStatus{
-				Capacity: api.ResourceList{
-					api.ResourceName(api.ResourceCPU): resource.MustParse("10"),
-				},
-			},
-			Spec: api.NodeSpec{
-				ExternalID: "external",
-			},
-		},
-		"missing-cpu": {
-			ObjectMeta: api.ObjectMeta{
-				Name:   "abc-123",
-				Labels: validSelector,
-			},
-			Status: api.NodeStatus{
-				Capacity: api.ResourceList{
-					api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
-				},
-			},
-			Spec: api.NodeSpec{
-				ExternalID: "external",
-			},
-		},
-		"invalid-memory": {
-			ObjectMeta: api.ObjectMeta{
-				Name:   "abc-123",
-				Labels: validSelector,
-			},
-			Status: api.NodeStatus{
-				Capacity: api.ResourceList{
-					api.ResourceName(api.ResourceCPU):    resource.MustParse("10"),
-					api.ResourceName(api.ResourceMemory): resource.MustParse("-10G"),
-				},
-			},
-			Spec: api.NodeSpec{
-				ExternalID: "external",
-			},
-		},
-		"invalid-cpu": {
-			ObjectMeta: api.ObjectMeta{
-				Name:   "abc-123",
-				Labels: validSelector,
-			},
-			Status: api.NodeStatus{
-				Capacity: api.ResourceList{
-					api.ResourceName(api.ResourceCPU):    resource.MustParse("-10"),
-					api.ResourceName(api.ResourceMemory): resource.MustParse("10G"),
-				},
-			},
-			Spec: api.NodeSpec{
-				ExternalID: "external",
-			},
-		},
 	}
 	for k, v := range errorCases {
 		errs := ValidateMinion(&v)
@@ -1980,14 +1913,11 @@ func TestValidateMinion(t *testing.T) {
 		for i := range errs {
 			field := errs[i].(*errors.ValidationError).Field
 			expectedFields := map[string]bool{
-				"metadata.name":           true,
-				"metadata.labels":         true,
-				"metadata.annotations":    true,
-				"metadata.namespace":      true,
-				"status.Capacity":         true,
-				"status.Capacity[memory]": true,
-				"status.Capacity[cpu]":    true,
-				"spec.ExternalID":         true,
+				"metadata.name":        true,
+				"metadata.labels":      true,
+				"metadata.annotations": true,
+				"metadata.namespace":   true,
+				"spec.ExternalID":      true,
 			}
 			if expectedFields[field] == false {
 				t.Errorf("%s: missing prefix for: %v", k, errs[i])
diff --git a/pkg/kubectl/cmd/get_test.go b/pkg/kubectl/cmd/get_test.go
index fc5ea5d..86e93fe 100644
--- a/pkg/kubectl/cmd/get_test.go
+++ b/pkg/kubectl/cmd/get_test.go
@@ -320,6 +320,9 @@ func TestGetMultipleTypeObjectsWithDirectReference(t *testing.T) {
 		ObjectMeta: api.ObjectMeta{
 			Name: "foo",
 		},
+		Spec: api.NodeSpec{
+			ExternalID: "ext",
+		},
 	}
 
 	f, tf, codec := NewAPIFactory()
